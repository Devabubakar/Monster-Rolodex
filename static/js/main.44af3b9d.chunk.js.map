{"version":3,"sources":["components/searchbox.component/searchbox.jsx","components/card.component/card.jsx","components/cardlist.components/Cardlist.jsx","App.js","reportWebVitals.js","index.js"],"names":["Searchbox","placeholder","handleChange","type","className","onChange","Card","props","src","monster","id","alt","name","email","cardlist","monsters","map","App","e","setState","searchFields","target","value","state","componentDidMount","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Cardlist","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAceA,EAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,uBACEC,KAAK,SACLC,UAAU,SACVH,YAAaA,EACbI,SAAUH,KCKDI,G,YAXF,SAACC,GAEZ,OACE,sBAAKH,UAAU,iBAAf,UACE,qBAAKI,IAAG,+BAA0BD,EAAME,QAAQC,GAAxC,aAAuDC,IAAI,KACnE,6BAAKJ,EAAME,QAAQG,OACnB,4BAAIL,EAAME,QAAQI,aCKTC,EAVE,SAACP,GAChB,OACE,qBAAKH,UAAU,YAAf,SACGG,EAAMQ,SAASC,KAAI,SAACP,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,UCoCZO,E,kDArCb,aAAe,IAAD,8BACZ,gBAcFf,aAAe,SAACgB,GACd,EAAKC,SAAS,CAAEC,aAAcF,EAAEG,OAAOC,SAbvC,EAAKC,MAAQ,CACXR,SAAU,GACVK,aAAc,IAGhB,EAAKI,kBAAoB,WACvBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKV,SAAS,CAAEJ,SAAUc,QAXnC,E,0CAmBd,WAAU,IAAD,EAC4BC,KAAKP,MAAhCR,EADD,EACCA,SAAUK,EADX,EACWA,aACZW,EAAmBhB,EAASiB,QAAO,SAACvB,GAAD,OACvCA,EAAQG,KAAKqB,cAAcC,SAASd,MAEtC,OACE,sBAAKhB,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEH,YAAY,kBACZC,aAAc4B,KAAK5B,eAErB,cAACiC,EAAD,CAAUpB,SAAUgB,W,GAhCVK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.44af3b9d.chunk.js","sourcesContent":["import React from 'react';\nimport './searchbox.css';\n\nconst Searchbox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      type='search'\n      className='search'\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default Searchbox;\n","import React from 'react';\nimport './card.css';\n\nconst Card = (props) => {\n  \n  return (\n    <div className='card-container' >\n      <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt='' />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport './cardlist.css';\nimport Card from '../card.component/card';\n\nconst cardlist = (props) => {\n  return (\n    <div className='card-list'>\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster = {monster}/>\n      ))}\n    </div>\n  );\n};\n\nexport default cardlist;\n","import { Component } from 'react';\nimport './App.css';\nimport Search from './components/searchbox.component/searchbox';\n\nimport Cardlist from './components/cardlist.components/Cardlist';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchFields: '',\n    };\n\n    this.componentDidMount = () => {\n      fetch('https://jsonplaceholder.typicode.com/users')\n        .then((response) => response.json())\n        .then((users) => this.setState({ monsters: users }));\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchFields: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchFields } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchFields)\n    );\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <Search\n          placeholder='Search Monsters'\n          handleChange={this.handleChange}\n        />\n        <Cardlist monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}